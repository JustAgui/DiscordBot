'use strict';
const Discord = require('discord.js');
const { Raid } = require('../Database/dbraid');
const Error = require("./util.js");
const Bosses = require("../json/Bosses.json");

Reflect.defineProperty(Raid, 'add', {
    value: async function add(boss, bossName, level, buff, notice = "") {

        if (boss) {
            boss.bossName = bossName;
            boss.level = Number(level);
            boss.buff = Number(buff);
            boss.notiz = notice;
            return boss.save();
        }
        return Raid.create({ bossName : bossName, level: level, buff: buff, notice: notice });
    },
});

module.exports = async function(textsplit, msg) {
    let bossName = "";
    let level = 0;
    let buff = 0;
    let notice = "";
    let emoji = "";
    textsplit.shift();

    if(textsplit.length === 2 || textsplit.length === 1) {
        let getBoss = checkboss(textsplit,msg, Bosses);
        //console.log(getBoss)
        if(getBoss) {
            bossName = getBoss[0];
            emoji = getBoss[1];
        } else {
            msg.channel.send(Error.possibleBossNames);
            return false;
        }
        if(textsplit.length === 1){
            try {
                let dbentries = await Raid.findAll({
                    where: { bossName: bossName },
                    order: [ ["level", "DESC"] ],
                    limit: 10 });

                let bossentries =  dbentries.map((boss) => `Lvl: ${boss.level}  Buff: ${boss.buff} Notiz: ${boss.notice}`).join('`\n`');
                if(bossentries) {
                    const bossembed = new Discord.MessageEmbed()
                        .setColor('#F74D57')
                        .setTitle(`${emoji} ${capitalizeFirstLetter(bossName)}`)
                        .addField('Last 10 Entries', "`"+bossentries+"`", false)
                        .setTimestamp()
                        .setFooter('Generated by your most loved BOT');

                    msg.channel.send(bossembed);
                } else {
                    let errormsg = await msg.channel.send(Error.noDatabaseEntry);
                    await errormsg.delete({timeout:2000}).catch(err => console.log(err));
                }
            }
            catch(err) {
                    console.log(err);
                    let errormsg = await msg.channel.send(Error.noDatabaseEntry);
                    await errormsg.delete({timeout:2000}).catch(err => console.log(err));
                }


        } else if(textsplit.length === 2) {
            if(textsplit[1].match(/^[0-9]+$/) == null) {
                msg.channel.send(Error.wrongArgument);
                return false;
            } else {
                level = textsplit[1];
            }

            try {

            }
            catch(err) {

            }

            const boss = await Raid.findOne({ where: { bossName: bossName, level: level } });
            if(boss) {
                msg.channel.send(emoji+" "+capitalizeFirstLetter(boss.bossName)+" Level: "+boss.level+" Buff: "+boss.buff+"\nNotiz: "+boss.notice)
            } else {
                msg.channel.send("No entry ðŸ˜¢");
            }
        }

    } else if(textsplit.length >= 3) {
        let getBoss = checkboss(textsplit,msg, Bosses);
        bossName = getBoss[0];
        emoji = getBoss[1];
        if(bossName == "") {
            msg.channel.send(Error.wrongArgument);
            return false;
        }

        textsplit.shift();
        if(textsplit.length > 0)
        {
            if(textsplit[0].match(/^[0-9]+$/) != null) {
                level = textsplit[0];
            } else {
                msg.channel.send(Error.wrongArgument);
                return false;
            }

        } else {
            msg.channel.send(Error.wrongArgument);
            return false;
        }

        textsplit.shift();
        if(textsplit.length > 0)
        {
            if(textsplit[0].match(/^[0-9]+$/) != null) {
                buff = textsplit[0];
            } else {
                msg.channel.send(Error.wrongArgument);
                return false;
            }

        } else {
            msg.channel.send(Error.wrongArgument);
            return false;
        }

        textsplit.shift();
        if(textsplit.length > 0)
        {
            notice = textsplit[0].toString();
        }

        const boss = await Raid.findOne({ where: { bossName: bossName, level: level } });
        Raid.add(boss, bossName, level, buff, notice);
        msg.channel.send(emoji+" "+capitalizeFirstLetter(bossName)+" Level: "+level+" Buff: "+buff+"\nNotiz: "+notice);

    } else {
        msg.channel.send(Error.wrongArgument);
        return false;
    }
}

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function checkboss(textsplit, msg, Bosses) {
    for(let boss of Bosses) {
        if(boss.name == textsplit[0].toLowerCase()) {
            let bossName = boss.name;
            let emoji = boss.emoji;
            return [bossName,emoji];
        }
    }
    return false;
}
