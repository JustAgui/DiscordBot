'use strict';

const Discord = require('discord.js');
const { Damagedealers } = require('../Database/dbraid');
const Error = require("./util.js");
const Bosses = require("../json/Bosses.json");

module.exports = async function(textsplit, msg) {

    let bossName = "";
    let userId = "";
    let level = 0;
    let buff = 0;
    let argsForCalculation = [];
    let normDamage = 0;
    let damageDone = 0;
    let notice = "";
    let emoji = "";
    let bossDbEntries = "";
    textsplit.shift();

    if(textsplit.length === 1) {
        let getBoss = checkboss(textsplit, Bosses);
        if (getBoss) {
            bossName = getBoss[0];
            emoji = getBoss[1];
        } else {
            msg.channel.send(Error.possibleBossNames);
            return false;
        }

        try {
            bossDbEntries = await Damagedealers.findAll({
                where: { bossName: bossName },
                order: [ ["damage", "DESC"] ],
            });
        }
        catch(err) {
            console.log(err);
            let errormsg = await msg.channel.send("couldnt find any database entry");
            await errormsg.delete({timeout:2000}).catch(err => console.log(err));
        }
        //console.log("USERID"+bossDbEntries)

        if(bossDbEntries != "") {
            let bossranking =  bossDbEntries.map((user,position) => `${position + 1}. ${user.damage}%  ${getusername(msg, user.userId)}`).join('`\n`');

            const bossembed = new Discord.MessageEmbed()
                .setColor('#F74D57')
                .setTitle(` ${emoji} DD Ranking`)
                .addField('Damage', "`"+bossranking+"`", false)
                .setTimestamp()
                .setFooter('Generated by your most loved BOT');

            msg.channel.send(bossembed);
        } else {
            let errormessage = await msg.channel.send(Error.noDatabaseEntry);
            //await mssg.delete(2000).catch(err => console.log(err));
        }


    } else if(textsplit.length === 4 || textsplit.length === 5) {
        let getBoss = checkboss(textsplit, Bosses);
        if (getBoss) {
            bossName = getBoss[0];
            emoji = getBoss[1];
            textsplit.shift();
        } else {
            msg.channel.send(Error.possibleBossNames);
            return false;
        }
        for(let i = 0;i<textsplit.length;i++) {
            if(textsplit[i].match(/^(?:\d{1,2})+(?:(\.)\d{1,2})?$/) != null && textsplit[0].match(/^(\d?[1-9]|[1-9]0)$/) != null) {
                argsForCalculation[i] = textsplit[i];

            } else {
                if(i === 3) {
                    argsForCalculation[i] = textsplit[i];
                } else {
                    msg.channel.send(Error.wrongNumbers);
                    return false;
                }
            }
        }
        console.log(argsForCalculation);

        [ level, buff, damageDone, notice = undefined ] = argsForCalculation;

        normDamage = calculatedamage(level, buff, damageDone);
        console.log("NOTIZ "+notice);
        userId = msg.author.id;

        try{
            let dbentry = await Damagedealers.findOne({ where: { userId: userId, bossName: bossName } });

            if(dbentry) {
                await dbentry.update({ damage: normDamage }, { where: { bossName: bossName, userId: userId } });
                msg.channel.send(`${emoji} Lvl: ${level} Normdamage ${normDamage}`);

            } else {
                await Damagedealers.create({ userId: userId, bossName: bossName, damage: normDamage,notice:notice });
                msg.channel.send(`${emoji} Lvl: ${level}  Normdamage: ${normDamage}`);
            }
        }
        catch(err) {
            let errormessage = await msg.channel.send(Error.noDatabaseEntry);
            await errormessage.delete({ timeout:3000 }).catch(err => console.log(err));
        }
        console.log(normDamage);

    } else {
        msg.channel.send(Error.numberOfArguments);
        return false;
    }

}

function checkboss(textsplit, Bosses) {
    for(let boss of Bosses) {
        if(boss.name == textsplit[0].toLowerCase()) {
            let bossName = boss.name;
            let emoji = boss.emoji;
            return [bossName,emoji];
        }
    }
    return false;
}

//bosslevel, buff, damage
function calculatedamage(level, buff, damageDone) {
    return (damageDone*1.63**(level-60)*2000/buff).toFixed(2);

}

function getusername(msg, userId) {
    return msg.guild.members.cache.get(userId).user.username;
}
