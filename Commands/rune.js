'use strict';
const Discord = require('discord.js');
const primaryRuneStats = require("../json/PrimaryRuneStats.json");
const secondaryRuneStats = require("../json/SecondaryRuneStats.json");
const Error = require("./util.js");


module.exports = function (textsplit, msg) {
    let primaryName = "";
    let basePrimaryValue = 0;
    let calcPrimaryValue = 0;
    let allowedStats = "";
    let stars = 0;
    let level = 0;
    let maxLevel = 0;
    let baseSecondaryValues = [];
    let calcSecondaryValues = [];
    let secondaryNames = [];

    textsplit.shift();
    if(textsplit.length > 0)
    {
        for(let i=0;i < primaryRuneStats.length;i++)
        {
            if(textsplit[0].toLowerCase() == primaryRuneStats[i].Stat) {
                primaryName = primaryRuneStats[i].Stat;
                basePrimaryValue = primaryRuneStats[i].BaseValue.toFixed(1);
                break;
            }
        }
        if(primaryName === "") {
            for(let stats of primaryRuneStats) {
                if(stats == primaryRuneStats[primaryRuneStats.length-1])
                {
                    allowedStats += stats.Stat+"";
                    break;
                }
                allowedStats += stats.Stat+", ";
            }
            msg.channel.send("**Zulässige Primary Stats sind:** \n"+allowedStats+"\nBitte auf Schreibfehler überprüfen")
            return;
        }
    } else {
        msg.channel.send(Error.noArgumentsRune);
        return;
    }
    textsplit.shift();
    if(textsplit.length > 1) {
        if(isNaN(textsplit[0]) === true || isNaN(textsplit[1]) === true) {
            msg.channel.send(Error.noArgumentsRune);
        } else {
            if(textsplit[0].match(/^[0-9]+$/) != null || textsplit[1].match(/^[0-9]+$/) != null) {
                stars = Number(textsplit[0]);
                level = Number(textsplit[1]);
                maxLevel = stars * 5;
                if(level > maxLevel) {
                    msg.channel.send("Runenlevel darf nicht größer als das maxlevel der Rune sein");
                    return;
                }
            }
        }

    } else {
        msg.channel.send(Error.noArgumentsRune);
    }

    calcPrimaryValue = (basePrimaryValue * stars * (1 + (level-1) / (maxLevel - 1))).toFixed(1);

    textsplit.splice(0,2);
    if(textsplit.length > 0) {
        for(let j=0;j<textsplit.length;j++)
        {
            for(let i=0;i<secondaryRuneStats.length;i++) {
                if(textsplit[j].toLowerCase() == secondaryRuneStats[i].Stat) {
                    baseSecondaryValues.push(secondaryRuneStats[i].BaseValue);
                    secondaryNames.push(secondaryRuneStats[i].Stat);
                    break;
                }
            }
        }

        for(let value of baseSecondaryValues) {
            let stat = value * stars * (1 + (level-1) / (maxLevel - 1));
            calcSecondaryValues.push(stat); //.toFixed(1)
        }
        doublerunestats();
        for(let i=0;i<calcSecondaryValues.length;i++)
        {
            calcSecondaryValues[i] = calcSecondaryValues[i].toFixed(1);
        }

        function doublerunestats() {
            if (stars === 6) {
                if (level >= 25) {
                    doubleFirstnElements(calcSecondaryValues, 4)
                } else if (level >= 20) {
                    doubleFirstnElements(calcSecondaryValues, 3)
                } else if (level >= 15) {
                    doubleFirstnElements(calcSecondaryValues, 2)
                } else if (level >= 10) {
                    doubleFirstnElements(calcSecondaryValues, 1)
                }
            } else {
                if (level >= 25) {
                    doubleFirstnElements(calcSecondaryValues, 3);
                } else if (level >= 20) {
                    doubleFirstnElements(calcSecondaryValues, 2)
                } else if (level >= 15 && stars > 3) {
                    doubleFirstnElements(calcSecondaryValues, 1)
                }
            }
        }

        function doubleFirstnElements(arrayToDouble, n) {
            for(let i=0;i<n;i++)
            {
                arrayToDouble[i] *= 2;
            }
        }
    }

    if(basePrimaryValue != 0 && calcPrimaryValue != 0) {

        const runeembed = new Discord.MessageEmbed()
            .setColor('#0099ff')
            .setTitle('Rune Calculation')
            .setDescription(`${stars}` + ' <:HE_StarBase:504263162325893130> Level:' + ` ${level}`)
            .addField('Primary', `${calcPrimaryValue}% ${capitalizeFirstLetter(primaryName)}`, true)
            .addField('\u200B', '\u200B', true)
            .addField('\u200B', '\u200B', true)
            .setTimestamp()
            .setFooter('Generated by your most loved BOT');


        for (let i = 0; i < secondaryNames.length; i++) {
            runeembed.addField(`${capitalizeFirstLetter(secondaryNames[i])}`, `${calcSecondaryValues[i]} %`, true);
        }

        msg.channel.send(runeembed);

        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    }
}
